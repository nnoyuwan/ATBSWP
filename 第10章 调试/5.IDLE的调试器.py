# “调试器”是 IDLE 的一项功能，让你每次执行一行程序。调试器将运行一行代
# 码，然后等待你告诉它继续。像这样让程序运行“在调试器之下”，你可以随便花
# 多少时间，检查程序运行时任意一个时刻的变量的值。对于追踪缺陷，这是一个很
# 有价值的工具。
# 要启用 IDLE 的调试器，就在交互式环境窗口中点击 DebugDebugger。这将打
# 开调试控制（ Debug Control）窗口，如图 10-1 所示。


# 当调试控制窗口出现后，勾选全部 4 个复选框： Stack、Locals、Source 和 Globals。
# 这样窗口将显示全部的调试信息。调试控制窗口显示时，只要你从文件编辑器运行程
# 序，调试器就会在第一条指令之前暂停执行，并显示下面的信息：

# • 将要执行的代码行；
# • 所有局部变量及其值的列表；
# • 所有全局变量及其值的列表。

# 你会注意到，在全局变量列表中，有一些变量你没有定义，诸如__builtins__、
# __doc__、 __file__，等等。它们是 Python 在运行程序时，自动设置的变量。这些变
# 量的含义超出了本书的范围，你可以暂时忽略它们。
# 程序将保持暂停，直到你按下调试控制窗口的 5 个按钮中的一个：
# Go、
# Step、
# Over、
# Out
# 或 Quit

# 10.5.1 Go
# 点击 Go 按钮将导致程序正常执行至终止，或到达一个“断点”（断点在本章稍
# 后介绍）。如果你完成了调试，希望程序正常继续，就点击 Go 按钮。

# 10.5.2 Step
# 点击 Step 按钮将导致调试器执行下一行代码，然后再次暂停。如果变量的值发
# 生了变化，调试控制窗口的全局变量和局部变量列表就会更新。如果下一行代码是一
# 个函数调用，调试器就会“步入”那个函数，跳到该函数的第一行代码。

# 10.5.3 Over
# 点击 Over 按扭将执行下一行代码，与 Step 按钮类似。但是，如果下一行代码
# 是函数调用， Over 按钮将“跨过”该函数的代码。该函数的代码将以全速执行，调
# 试器将在该函数返回后暂停。例如，如果下一行代码是 print() 调用，你实际上不关
# 心内建 print() 函数中的代码，只希望传递给它的字符串打印在屏幕上。
# 出于这个原因，使用 Over 按钮比使用 Step 按钮更常见！

# 10.5.4 Out
# 点击 Out 按钮将导致调试器全速执行代码行，直到它从当前函数返回。如果你
# 用 Step 按钮进入了一个函数，现在只想继续执行指令，直到该函数返回，那就点击
# Out 按钮，从当前的函数调用“走出来”。

# 10.5.5 Quit
# 如果你希望完全停止调试，不必继续执行剩下的程序，就点击 Quit 按钮。 Quite 按
# 钮将马上终止该程序。如果你希望再次正常运行你的程序，就再次选择 DebugDebugger，
# 禁用调试器。

# 10.5.6 调试一个数字相加的程序

# print('Enter the first number to add:')
# first = input()
# print('Enter the second number to add:')
# second = input()
# print('Enter the third number to add:')
# third = input()
# print('The sum is ' + first + second + third)

# 这个程序没有崩溃，但求和显然是错的。让我们启用调试控制窗口，再次运行
# 它，这次在调试器控制之下。
# 当你按下 F5 或选择 RunRun Module（启用 DebugDebugger，选中调试控制窗
# 口的所有 4 个复选框），程序启动时将暂停在第 1 行。调试器总是会暂停在它将要
# 执行的代码行上。调试控制窗口看起来如图 10-2 所示。


# 10.5.7 断点
import random

heads = 0
for i in range(1, 1001):
    if random.randint(0, 1) == 1:
        heads = heads + 1
    if i == 500:
        print('Halfway done!')
print('Heads came up ' + str(heads) + ' times.')
